{"version":3,"sources":["utils/fetchClient.ts","components/Loader/Loader.tsx","components/PostsList.tsx","api/posts.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","api/comments.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","Loader","className","PostsList","userId","selectedPost","setSelectedPost","useState","posts","setPosts","isReceiving","setIsReceiving","isError","setIsError","useEffect","getPostsByUserId","receivedPosts","catch","finally","length","map","post","isSelected","id","title","type","onClick","NewCommentForm","addComment","isInputUpdating","name","setNameValue","email","setEmailValue","setBodyValue","nameError","setNameError","emailError","setEmailError","bodyError","setBodyError","setErrorsOnIputs","useCallback","clearErrors","onSubmit","event","preventDefault","htmlFor","placeholder","classNames","value","onChange","target","PostDetails","postId","comments","setComments","setInputIsUpdating","isFormVisible","setIsFormVisible","getCommentsByPostId","receivedComments","deleteComment","commentId","prev","filter","comment","deleteCommentById","commentBody","href","newComment","tempComment","postedComment","UserSelector","users","setSelectedUser","selectedUser","open","setOpen","menuRef","useRef","handleDocumentClick","current","contains","document","addEventListener","removeEventListener","ref","status","role","user","App","setUsers","receivedUsers","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ed91ccf0.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\n// import classNames from 'classnames';\nimport { getPostsByUserId } from '../api/posts';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\n\ntype PropsTypes = {\n  userId: number;\n  setSelectedPost: (post: Post | null) => void;\n  selectedPost: Post | null\n};\n\nexport const PostsList: React.FC<PropsTypes> = ({\n  userId,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isReceiving, setIsReceiving] = useState<boolean>(true);\n  const [isError, setIsError] = useState<boolean>(false);\n\n  useEffect(() => {\n    setIsReceiving(true);\n    getPostsByUserId(userId)\n      .then(receivedPosts => {\n        setPosts(receivedPosts);\n      })\n      .catch(() => {\n        setIsError(true);\n      })\n      .finally(() => {\n        setIsReceiving(false);\n      });\n  }, [userId]);\n\n  if (isReceiving) {\n    return <Loader />;\n  }\n\n  if (!posts.length) {\n    return (\n      <div\n        className=\"notification is-warning\"\n        data-cy=\"NoPostsYet\"\n      >\n        No posts yet\n      </div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <div\n        className=\"notification is-danger\"\n        data-cy=\"PostsLoadingError\"\n      >\n        Something went wrong!\n      </div>\n    );\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const isSelected = post === selectedPost;\n\n            return (\n              <tr data-cy=\"Post\">\n                <td data-cy=\"PostId\">{post.id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {post.title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  {\n                    isSelected\n                      ? (\n                        <button\n                          type=\"button\"\n                          data-cy=\"PostButton\"\n                          className=\"button is-link\"\n                          onClick={() => {\n                            setSelectedPost(null);\n                          }}\n                        >\n                          Close\n                        </button>\n                      ) : (\n                        <button\n                          type=\"button\"\n                          data-cy=\"PostButton\"\n                          className=\"button is-link is-light\"\n                          onClick={() => {\n                            setSelectedPost(post);\n                          }}\n                        >\n                          Open\n                        </button>\n                      )\n                  }\n                </td>\n              </tr>\n            );\n          })}\n\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPostsByUserId = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { FormEvent, useState, useCallback } from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\n\ntype PropsTypes = {\n  addComment: (comment: CommentData) => Promise<void>,\n  isInputUpdating: boolean\n};\n\nexport const NewCommentForm: React.FC<PropsTypes> = ({\n  addComment,\n  isInputUpdating,\n}) => {\n  const [name, setNameValue] = useState('');\n  const [email, setEmailValue] = useState('');\n  const [body, setBodyValue] = useState('');\n  const [nameError, setNameError] = useState<boolean>(false);\n  const [emailError, setEmailError] = useState<boolean>(false);\n  const [bodyError, setBodyError] = useState<boolean>(false);\n\n  const setErrorsOnIputs = useCallback(() => {\n    setBodyError(true);\n    setNameError(true);\n    setEmailError(true);\n  }, []);\n\n  const clearErrors = () => {\n    setBodyError(false);\n    setNameError(false);\n    setEmailError(false);\n  };\n\n  const clearInputs = () => {\n    setEmailValue('');\n    setBodyValue('');\n    setNameValue('');\n    clearErrors();\n  };\n\n  const getDefaultSettings = () => {\n    setBodyValue('');\n  };\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (!name || !body || !email) {\n      setErrorsOnIputs();\n\n      return;\n    }\n\n    const newComment = {\n      name,\n      body,\n      email,\n    };\n\n    addComment(newComment);\n    getDefaultSettings();\n    clearErrors();\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': (nameError && !name),\n              },\n            )}\n            value={name}\n            onChange={({ target }) => setNameValue(target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className={classNames(\n              'fas',\n              {\n                'fa-exclamation-triangle': (nameError && !name),\n              },\n            )}\n            />\n          </span>\n        </div>\n\n        {(nameError && !name) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': (emailError && !email),\n              },\n            )}\n            value={email}\n            onChange={({ target }) => setEmailValue(target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className={classNames(\n              'fas',\n              {\n                'fa-exclamation-triangle': (emailError && !email),\n              },\n            )}\n            />\n          </span>\n        </div>\n\n        {(emailError && !email) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': (bodyError && !body),\n              },\n            )}\n            value={body}\n            onChange={({ target }) => setBodyValue(target.value)}\n          />\n        </div>\n\n        {(bodyError && !body) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              {\n                'is-loading': isInputUpdating,\n              },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearInputs}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\nimport {\n  getCommentsByPostId,\n  postComment,\n  deleteCommentById,\n} from '../api/comments';\n\ntype PropTypes = {\n  selectedPost: Post;\n};\n\nexport const PostDetails: React.FC<PropTypes> = ({\n  selectedPost,\n}) => {\n  const { id: postId, title, body } = selectedPost;\n\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [,setIsError] = useState<boolean>(false);\n  const [isInputUpdating, setInputIsUpdating] = useState<boolean>(false);\n  const [isReceiving, setIsReceiving] = useState<boolean>(true);\n  const [isFormVisible, setIsFormVisible] = useState<boolean>(false);\n\n  useEffect(() => setIsFormVisible(false), [postId]);\n\n  useEffect(() => {\n    setIsReceiving(true);\n    getCommentsByPostId(postId)\n      .then(receivedComments => {\n        setComments(receivedComments);\n      })\n      .catch(() => {\n        setIsError(true);\n      })\n      .finally(() => {\n        setIsReceiving(false);\n      });\n  }, [postId]);\n\n  const addComment = (newComment: CommentData) => {\n    setInputIsUpdating(true);\n    const tempComment = {\n      id: 0,\n      postId,\n      ...newComment,\n    };\n\n    return postComment(tempComment)\n      .then(postedComment => {\n        setComments(prev => [...prev, postedComment]);\n      })\n      .catch(() => {\n        setIsError(true);\n      })\n      .finally(() => {\n        setInputIsUpdating(false);\n      });\n  };\n\n  const deleteComment = (commentId: number) => {\n    setComments(prev => (\n      prev.filter(comment => comment.id !== commentId)\n    ));\n    deleteCommentById(commentId)\n      .catch(() => {\n        setIsError(true);\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${postId}: ${title}`}\n          </h2>\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        {isReceiving\n          ? (<Loader />)\n          : (\n            <div className=\"block\">\n              {!comments.length\n                ? (\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n                ) : (\n                  <>\n                    <p className=\"title is-4\">Comments:</p>\n                    {comments.map(comment => {\n                      const {\n                        name,\n                        email,\n                        body: commentBody,\n                        id,\n                      } = comment;\n\n                      return (\n                        <article className=\"message is-small\" data-cy=\"Comment\">\n                          <div className=\"message-header\">\n                            <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                              {name}\n                            </a>\n                            <button\n                              data-cy=\"CommentDelete\"\n                              type=\"button\"\n                              className=\"delete is-small\"\n                              aria-label=\"delete\"\n                              onClick={() => {\n                                deleteComment(id);\n                              }}\n                            >\n                              delete button\n                            </button>\n                          </div>\n\n                          <div className=\"message-body\" data-cy=\"CommentBody\">\n                            {commentBody}\n                          </div>\n                        </article>\n                      );\n                    })}\n                  </>\n                )}\n\n              {!isFormVisible && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setIsFormVisible(true)}\n                >\n                  Write a comment\n                </button>\n              )}\n            </div>\n          )}\n\n        {isFormVisible && (\n          <NewCommentForm\n            addComment={addComment}\n            isInputUpdating={isInputUpdating}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getCommentsByPostId = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = (comment: Comment) => {\n  return client.post<Comment>('/comments', comment);\n};\n\nexport const deleteCommentById = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\ntype PropsTypes = {\n  users: User[];\n  setSelectedUser: (user: User) => void;\n  selectedUser: User | null,\n  setSelectedPost: (post: Post | null) => void;\n};\n\nexport const UserSelector: React.FC<PropsTypes> = ({\n  users,\n  setSelectedUser,\n  selectedUser,\n  setSelectedPost,\n}) => {\n  const [open, setOpen] = useState<boolean>(false);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleDocumentClick = (event: MouseEvent) => {\n      if (menuRef.current\n        && !menuRef.current.contains(event.target as HTMLElement)) {\n        setOpen(false);\n      }\n    };\n\n    document.addEventListener('click', handleDocumentClick);\n\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n    };\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n      ref={menuRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setOpen(status => !status);\n          }}\n        >\n          <span>\n            {selectedUser\n              ? selectedUser.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        {open && (\n          <div\n            className=\"dropdown-content\"\n          >\n            {users.map((user) => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className=\"dropdown-item\"\n                onClick={() => {\n                  setOpen(false);\n                  setSelectedUser(user);\n                  setSelectedPost(null);\n                }}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/users';\n\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isReceiving, setIsReceiving] = useState<boolean>(true);\n  const [isError, setIsError] = useState<boolean>(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(receivedUsers => {\n        setUsers(receivedUsers);\n      })\n      .catch(() => {\n        setIsError(true);\n      })\n      .finally(() => {\n        setIsReceiving(false);\n      });\n  }, []);\n\n  if (isError) {\n    return (\n      <div\n        className=\"notification is-danger\"\n        data-cy=\"PostsLoadingError\"\n      >\n        Something went wrong!\n      </div>\n    );\n  }\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  setSelectedUser={setSelectedUser}\n                  selectedUser={selectedUser}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n\n                {isReceiving && <Loader />}\n\n                {!selectedUser\n                  ? (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  ) : (\n                    <PostsList\n                      userId={selectedUser.id}\n                      setSelectedPost={setSelectedPost}\n                      selectedPost={selectedPost}\n                    />\n                  )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}